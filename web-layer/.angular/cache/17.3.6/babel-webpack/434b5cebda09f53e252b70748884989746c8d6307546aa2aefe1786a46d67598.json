{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nlet ImgSanitizerService = class ImgSanitizerService {\n  constructor(sanitizer) {\n    this.sanitizer = sanitizer;\n  }\n  sanitizeImg(img) {\n    return this.sanitizer.bypassSecurityTrustUrl(img);\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: DomSanitizer\n  }];\n};\nImgSanitizerService = __decorate([Injectable({\n  providedIn: 'root'\n})], ImgSanitizerService);\nexport { ImgSanitizerService };","map":{"version":3,"names":["Injectable","DomSanitizer","ImgSanitizerService","constructor","sanitizer","sanitizeImg","img","bypassSecurityTrustUrl","_","__decorate","providedIn"],"sources":["/home/maksi/Studying/Porsche/web-layer/src/services/imgSanitizerService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImgSanitizerService {\n  constructor(private sanitizer: DomSanitizer) { }\n\n  sanitizeImg(img: string): SafeUrl {\n    return this.sanitizer.bypassSecurityTrustUrl(img);\n  }\n}"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,YAAY,QAAiB,2BAA2B;AAK1D,IAAMC,mBAAmB,GAAzB,MAAMA,mBAAmB;EAC9BC,YAAoBC,SAAuB;IAAvB,KAAAA,SAAS,GAATA,SAAS;EAAkB;EAE/CC,WAAWA,CAACC,GAAW;IACrB,OAAO,IAAI,CAACF,SAAS,CAACG,sBAAsB,CAACD,GAAG,CAAC;EACnD;EAAC,QAAAE,CAAA,G;;;;AALUN,mBAAmB,GAAAO,UAAA,EAH/BT,UAAU,CAAC;EACVU,UAAU,EAAE;CACb,CAAC,C,EACWR,mBAAmB,CAM/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}